#version: '3.8'
#
#services:
#  # Eureka Server
#  eureka-server:
#    image: eureka-server:latest
#    build:
#      context: ./eureka-server  # Đường dẫn đến thư mục chứa mã nguồn Eureka Server
#    ports:
#      - "8761:8761"  # Cổng cho Eureka Server
#    networks:
#      - app-network
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker  # Đảm bảo Eureka Server sử dụng profile Docker nếu có
#
#  # API Gateway
#  api-gateway:
#    image: api-gateway:latest
#    build:
#      context: ./api-gateway  # Đường dẫn đến thư mục chứa mã nguồn API Gateway
#    ports:
#      - "8080:8080"  # Cổng cho API Gateway
#    depends_on:
#      - eureka-server
#      - product-service
#      - user-service
#    networks:
#      - app-network
#    environment:
#      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka
#      - SPRING_PROFILES_ACTIVE=docker
#
#  # Product Service
#  product-service:
#    image: product-service:latest
#    build:
#      context: ./product-service  # Đường dẫn đến thư mục chứa mã nguồn Product Service
#    ports:
#      - "8082:8082"  # Cổng cho Product Service
#    depends_on:
#      - eureka-server
#    networks:
#      - app-network
#    environment:
#      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka
#      - SPRING_PROFILES_ACTIVE=docker
#
#  # User Service
#  user-service:
#    image: user-service:latest
#    build:
#      context: ./user-service  # Đường dẫn đến thư mục chứa mã nguồn User Service
#    ports:
#      - "8081:8081"  # Cổng cho User Service
#    depends_on:
#      - eureka-server
#    networks:
#      - app-network
#    environment:
#      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka
#      - SPRING_PROFILES_ACTIVE=docker
#
#networks:
#  app-network:
#    driver: bridge  # Tạo một mạng cầu nối (bridge) giữa các dịch vụ
#

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka-net
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-net
    ports:
      - "9092:9092"
      - "9093:9093"

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    restart: always
    environment:
      KAFKA_BROKERCONNECT: kafka:9093
      KAFKA_LISTENER_NAME: INSIDE
    ports:
      - "9000:9000"
    networks:
      - kafka-net

  vault:
    image: hashicorp/vault:latest
    container_name: vault
    restart: always
    environment:
      VAULT_ADDR: http://0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - ./vault-config:/vault/config
      - ./vault-data:/vault/file
    cap_add:
      - IPC_LOCK
    command: vault server -config=/vault/config/vault.hcl
    networks:
      - kafka-net

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    restart: always
    ports:
      - "9412:9411"
    networks:
      - kafka-net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - kafka-net

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - kafka-net

  redis-insight:
    image: redis/redisinsight:latest
    container_name: redis-insight
    restart: always
    ports:
      - "5540:5540"
    networks:
      - kafka-net
    depends_on:
      - redis

  temporal:
    image: temporalio/auto-setup:latest
    container_name: temporal
    restart: always
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=temporal-postgres
      - TEMPORAL_ADDRESS=temporal:7233
    ports:
      - "7233:7233"
    depends_on:
      - temporal-postgres
    networks:
      - kafka-net

  temporal-postgres:
    image: postgres:17
    container_name: temporal-postgres
    restart: always
    environment:
      - POSTGRES_USER=temporal
      - POSTGRES_PASSWORD=temporal
      - POSTGRES_DB=temporal
    ports:
      - "5432:5432"
    networks:
      - kafka-net
    volumes:
      - temporal-postgres-data:/var/lib/postgresql/data

  temporal-ui:
    image: temporalio/ui:latest
    container_name: temporal-ui
    restart: always
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
    ports:
      - "8088:8080"
    depends_on:
      - temporal
    networks:
      - kafka-net

networks:
  kafka-net:
    driver: bridge

volumes:
  temporal-postgres-data:
